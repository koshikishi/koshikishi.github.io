{"version":3,"file":"main.min.js","mappings":"mBAAA,MAqBMA,EAAuBA,CAACC,EAASC,EAAWC,KAbxBC,EAACH,EAASC,KAClCD,EAAQI,UAAUC,OAAOJ,GACpBD,EAAQM,YACbN,EAAQI,UAAUG,IAAIN,EAAU,EAWhCE,CAAkBH,EAASC,GAC3BD,EAAQQ,MAAMC,mBAvBY,UAyB1BC,OAAOC,YAAW,KAChBX,EAAQI,UAAUC,OAAOJ,GACzBD,EAAQQ,MAAMI,eAAe,sBAAsB,GAClDV,EAAM,ECxBLW,EAES,oBAFTA,EAIW,yBAOXC,EAAOC,SAASC,cAAe,cAC/BC,EAAaF,SAASC,cAAe,mBACrCE,EAAiBR,OAAOS,WAdV,sBAqBdC,EAAaA,CAACC,GAAUP,EAAKV,UAAUkB,SAAST,MACpD,GAAIQ,IAAWP,EAAKV,UAAUkB,SAAST,GACrC,OAGF,MAAMU,EAAaF,EAlBX,aACA,YAmBJA,GACFP,EAAKV,UAAUG,IAAIM,GACnBI,EAAWb,UAAUG,IAAIM,KAEzBd,EAAqBe,EAAMD,EAjCJ,KAkCvBd,EAAqBkB,EAAYJ,EAlCV,MAqCzBI,EAAWO,iBAAiBC,YAAcF,EAC1CN,EAAWS,aAAa,aAAcH,GACtCN,EAAWS,aAAa,gBAAiBL,EAAO,EAM5CM,EAAcA,KAClBP,GAAY,EAwBPF,EAAeU,UAClBd,EAAKe,iBAAiB,QAASF,GAC/BV,EAAWY,iBAAiB,QAASF,IAGvCT,EAAeW,iBAAiB,UArBX,SAASC,GAC1BA,EAAIF,SACNR,GAAW,GAEXN,EAAKiB,oBAAoB,QAASJ,GAClCV,EAAWc,oBAAoB,QAASJ,KAExCb,EAAKe,iBAAiB,QAASF,GAC/BV,EAAWY,iBAAiB,QAASF,GAEzC,G","sources":["webpack://webdevden/./source/js/utils.js","webpack://webdevden/./source/js/menu.js"],"sourcesContent":["const ANIMATION_DIRECTION = 'reverse';\n\n/**\n * Resets CSS-animation for an element\n *\n * @param {Element} element - an element to reset the animation for\n * @param {string} className - CSS-class that adds the animation\n */\nconst resetCSSAnimation = (element, className) => {\n  element.classList.remove(className);\n  void element.offsetWidth;\n  element.classList.add(className);\n};\n\n/**\n * Hides an element (removes a class with an animation showing the element, for example .shown)\n *\n * @param {Element} element - an element to be hidden (animated)\n * @param {string} className - CSS-class that adds the animation\n * @param {number} timer - an animation duration (ms)\n */\nconst removeAnimationClass = (element, className, timer) => {\n  resetCSSAnimation(element, className);\n  element.style.animationDirection = ANIMATION_DIRECTION;\n\n  window.setTimeout(() => {\n    element.classList.remove(className);\n    element.style.removeProperty('animation-direction');\n  }, timer);\n};\n\nexport {removeAnimationClass};\n","import {removeAnimationClass} from './utils.js';\n\nconst ANIMATION_DURATION = 300;\nconst MEDIA_QUERY = '(min-width: 768px)';\nconst ElementClass = {\n  MENU: 'main-menu',\n  MENU_OPENED: 'main-menu--opened',\n  TOGGLE: 'header__toggle',\n  TOGGLE_OPENED: 'header__toggle--opened',\n};\nconst ToggleText = {\n  OPENED: 'Close menu',\n  CLOSED: 'Open menu',\n};\n\nconst menu = document.querySelector(`.${ElementClass.MENU}`);\nconst menuToggle = document.querySelector(`.${ElementClass.TOGGLE}`);\nconst mediaQueryList = window.matchMedia(MEDIA_QUERY);\n\n/**\n * Toggles a menu to the opened/closed state depending on the passed argument\n *\n * @param {boolean} [doOpen] - true if the menu should be closed, or false if it should be opened; if no argument was passed, then the menu will change its state to the opposite\n */\nconst toggleMenu = (doOpen = !menu.classList.contains(ElementClass.MENU_OPENED)) => {\n  if (doOpen === menu.classList.contains(ElementClass.MENU_OPENED)) {\n    return;\n  }\n\n  const toggleText = doOpen ? ToggleText.OPENED : ToggleText.CLOSED;\n\n  if (doOpen) {\n    menu.classList.add(ElementClass.MENU_OPENED);\n    menuToggle.classList.add(ElementClass.TOGGLE_OPENED);\n  } else {\n    removeAnimationClass(menu, ElementClass.MENU_OPENED, ANIMATION_DURATION);\n    removeAnimationClass(menuToggle, ElementClass.TOGGLE_OPENED, ANIMATION_DURATION);\n  }\n\n  menuToggle.lastElementChild.textContent = toggleText;\n  menuToggle.setAttribute('aria-label', toggleText);\n  menuToggle.setAttribute('aria-expanded', doOpen);\n};\n\n/**\n * Handles mouse clicks in the menu\n */\nconst onMenuClick = () => {\n  toggleMenu();\n};\n\n/**\n * Adds event listeners to the menu if it is a mobile layout, and removes them otherwise\n *\n * @param {Event} evt - a change event object\n */\nconst onLayoutChange = function(evt) {\n  if (evt.matches) {\n    toggleMenu(false);\n\n    menu.removeEventListener('click', onMenuClick);\n    menuToggle.removeEventListener('click', onMenuClick);\n  } else {\n    menu.addEventListener('click', onMenuClick);\n    menuToggle.addEventListener('click', onMenuClick);\n  }\n};\n\n/**\n * Adds event listeners to the menu and MediaQueryList\n */\nexport default () => {\n  if (!mediaQueryList.matches) {\n    menu.addEventListener('click', onMenuClick);\n    menuToggle.addEventListener('click', onMenuClick);\n  }\n\n  mediaQueryList.addEventListener('change', onLayoutChange);\n};\n"],"names":["removeAnimationClass","element","className","timer","resetCSSAnimation","classList","remove","offsetWidth","add","style","animationDirection","window","setTimeout","removeProperty","ElementClass","menu","document","querySelector","menuToggle","mediaQueryList","matchMedia","toggleMenu","doOpen","contains","toggleText","lastElementChild","textContent","setAttribute","onMenuClick","matches","addEventListener","evt","removeEventListener"],"sourceRoot":""}